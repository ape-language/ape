;; test.ape
;;
;; Copyright (c) 2021 Xiongfei Shi
;;
;; Author: Xiongfei Shi <xiongfei.shi(a)icloud.com>
;; License: Apache-2.0
;;
;; https://github.com/shixiongfei/ape
;;

(print (length '(1 2 3 4 5)))
(print (length "Hello, World!"))

(print (car '(1 2 3 4 5)))
(print (cdr '(1 2 3 4 5)))

(print (do (cons 1 2)))

(print (+ 1 2 3 4 5))
(print (- 10 4 3 2))
(print (* 2 3 4 5 6))
(print (/ 10 4 3 2))

(print (type (/ 10 3)))
(print (type (/ 10 2)))

(def x 100)
(print "x =" x)

(set! x 150)
(print "x =" x)

(print (> 1 2))
(print (>= 1 2))
(print (> 2 1))
(print (>= 2 2))
(print (< 1 2))
(print (<= 1 2))
(print (< 2 1))
(print (<= 2 2))

(print (and 1 2))
(print (and 1 nil 2))
(print (or nil 2))
(print (or 1 2))
(print (not nil))

(def c (cons 1 2))
(print "c =" c)

(set-car! c 4)
(set-cdr! c 5)
(print "c =" c)


(defn sum (a b)
  (+ a b))

(print "sum 2 3 =" (sum 2 3))


(defn fib (n)
  (if (<= 2 n)
      (+ (fib (- n 1)) (fib (- n 2)))
    n))

(print "fib 28 =" (fib 28))


(defn counter (val step)
  (def count val)
  (fn ()
    (set! count (+ count step))))

(def count (counter 0 1))

(print "Count" (count))
(print "Count" (count))
(print "Count" (count))
(print "Count" (count))
(print "Count" (count))


(defmacro push (val lst)
  `(set! ,lst (cons ,val ,lst)))

(def items (list "cat" "dog" "fox"))

(push "owl" items)
(push "cow" items)

(print items)


(defn accum (n)
  (defn iter (acc step)
    (cond
      (> step n) acc
      (iter (+ acc step) (+ step 1))))
  (iter 0 0))

(print "accum 100 =" (accum 100))


(print (eval '(+ 1 2 3 4 5)))


(when true
  (set! x 200)
  (print "when x =" x))

(unless nil
  (set! x 250)
  (print "unless x =" x))


(set! x 10)

(while (> x 0)
  (print "x =" x)
  (set! x (- x 1)))


(print "global x =" x)

(print "let =" (let (x (set! x (+ x 1))
                     y 8)
                 (+ x y)))

(print "global x =" x)


(for x items
  (print ">" x))

(print items)

(for x (list 1 2 3 4 5)
  (print x))

(for x '(a b c d e)
  (print x))
